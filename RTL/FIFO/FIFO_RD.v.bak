module fifo_rd #(parameter ADDRSIZE)
 (
    input rinc,
    input rclk,
    input rrst_n,
    input [ADDRSIZE:0] rq2_wptr,
    output wire rempty,
    output [ADDRSIZE-1:0] raddr,
    output reg [ADDRSIZE:0] gray_rd_ptr
);

   reg [ADDRSIZE-1:0]  rd_ptr ;

// increment binary pointer
always @(posedge rclk or negedge rrst_n)
 begin
  if(!rrst_n)
   begin
    rd_ptr <= 0 ;
   end
 else if (!rempty && rinc)
    rd_ptr <= rd_ptr + 1 ;
 end


// generation of read address
assign raddr = rd_ptr[ADDRSIZE-2:0] ;

// converting binary read pointer to gray coded
always @(posedge rclk or negedge rrst_n)
begin
 if(!rrst_n)
   begin
    gray_rd_ptr <= 0 ;
   end
 else 
  begin
   case (rd_ptr)
   4'b0000: gray_rd_ptr <= 4'b0000 ;
   4'b0001: gray_rd_ptr <= 4'b0001 ;
   4'b0010: gray_rd_ptr <= 4'b0011 ;
   4'b0011: gray_rd_ptr <= 4'b0010 ;
   4'b0100: gray_rd_ptr <= 4'b0110 ;
   4'b0101: gray_rd_ptr <= 4'b0111 ;
   4'b0110: gray_rd_ptr <= 4'b0101 ;
   4'b0111: gray_rd_ptr <= 4'b0100 ;
   4'b1000: gray_rd_ptr <= 4'b1100 ;
   4'b1001: gray_rd_ptr <= 4'b1101 ;
   4'b1010: gray_rd_ptr <= 4'b1111 ;
   4'b1011: gray_rd_ptr <= 4'b1110 ;
   4'b1100: gray_rd_ptr <= 4'b1010 ;
   4'b1101: gray_rd_ptr <= 4'b1011 ;
   4'b1110: gray_rd_ptr <= 4'b1001 ;
   4'b1111: gray_rd_ptr <= 4'b1000 ;
   endcase
  end
 end


// generation of empty flag
assign rempty = (rq2_wptr ==gray_rd_ptr) ;

endmodule
